---
description: Use this rule when running terminal/bash/shell/npm commands
globs: 
alwaysApply: false
---
# Terminal Commands Guidelines

This document outlines the best practices and guidelines for running terminal commands in our project.

## Environment Setup

1. **IMPORTANT**: Before running any commands, you must set up the correct Node.js version:
   ```bash
   # Install and use the correct Node.js version
   nvm install
   
   # Verify Node version
   node --version
   ```

2. Install dependencies:
   ```bash
   # Install all dependencies
   npm install
   
   # Install specific package
   npm install <package-name>
   ```

## Command Execution

1. Always use npm for package related commands:
   ```bash
   # Run scripts
   npm run <script>
   
   # Install packages
   npm install <package-name>
   
   # Install dev dependencies
   npm install --save-dev <package-name>
   ```

2. Development commands:
   ```bash
   # Start development server
   npm run docker:up
   
   # Run tests
   CI=true npm run test
   
   # Build project
   npm run build
   ```

## Database Commands

1. Database migrations:
   ```bash
   # To generate migrations
   npm run db:generate

   # Run migrations
   npm run db:migrate
   ```

## Best Practices

1. Always run `nvm install` before running any npm commands
2. Always run commands from the project root directory
3. Use the provided npm scripts instead of running commands directly
4. Check the package.json for available scripts before running custom commands
5. Use environment variables for sensitive information
6. Never commit sensitive data or credentials

## Troubleshooting

1. Clear cache:
   ```bash
   # Clear npm cache
   npm cache clean --force
   ```

2. Reset node_modules:
   ```bash
   # Remove node_modules
   rm -rf node_modules
   
   # Reinstall dependencies
   npm install
   ```
